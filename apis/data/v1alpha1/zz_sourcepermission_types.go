/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PermissionsObservation struct {
}

type PermissionsParameters struct {

	// Permission to associate with item. Must be `Query`.
	// +kubebuilder:validation:Required
	Permission *string `json:"permission" tf:"permission,omitempty"`

	// ID of the team to manage permissions for.
	// +kubebuilder:validation:Optional
	TeamID *int64 `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// ID of the user to manage permissions for.
	// +kubebuilder:validation:Optional
	UserID *int64 `json:"userId,omitempty" tf:"user_id,omitempty"`
}

type SourcePermissionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SourcePermissionParameters struct {

	// ID of the datasource to apply permissions to.
	// +kubebuilder:validation:Required
	DatasourceID *int64 `json:"datasourceId" tf:"datasource_id,omitempty"`

	// The permission items to add/update. Items that are omitted from the list will be removed.
	// +kubebuilder:validation:Required
	Permissions []PermissionsParameters `json:"permissions" tf:"permissions,omitempty"`
}

// SourcePermissionSpec defines the desired state of SourcePermission
type SourcePermissionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SourcePermissionParameters `json:"forProvider"`
}

// SourcePermissionStatus defines the observed state of SourcePermission.
type SourcePermissionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SourcePermissionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SourcePermission is the Schema for the SourcePermissions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafanajet}
type SourcePermission struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SourcePermissionSpec   `json:"spec"`
	Status            SourcePermissionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SourcePermissionList contains a list of SourcePermissions
type SourcePermissionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SourcePermission `json:"items"`
}

// Repository type metadata.
var (
	SourcePermission_Kind             = "SourcePermission"
	SourcePermission_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SourcePermission_Kind}.String()
	SourcePermission_KindAPIVersion   = SourcePermission_Kind + "." + CRDGroupVersion.String()
	SourcePermission_GroupVersionKind = CRDGroupVersion.WithKind(SourcePermission_Kind)
)

func init() {
	SchemeBuilder.Register(&SourcePermission{}, &SourcePermissionList{})
}
