/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SyntheticMonitoringInstallationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	SmAccessToken *string `json:"smAccessToken,omitempty" tf:"sm_access_token,omitempty"`
}

type SyntheticMonitoringInstallationParameters struct {

	// The ID of the logs instance to install SM on (stack's `logs_user_id` attribute).
	// +kubebuilder:validation:Required
	LogsInstanceID *float64 `json:"logsInstanceId" tf:"logs_instance_id,omitempty"`

	// The ID of the metrics instance to install SM on (stack's `prometheus_user_id` attribute).
	// +kubebuilder:validation:Required
	MetricsInstanceID *float64 `json:"metricsInstanceId" tf:"metrics_instance_id,omitempty"`

	// The Cloud API Key with the `MetricsPublisher` role used to publish metrics to the SM API
	// +kubebuilder:validation:Required
	MetricsPublisherKeySecretRef v1.SecretKeySelector `json:"metricsPublisherKeySecretRef" tf:"-"`

	// The ID of the stack to install SM on.
	// +kubebuilder:validation:Required
	StackID *float64 `json:"stackId" tf:"stack_id,omitempty"`
}

// SyntheticMonitoringInstallationSpec defines the desired state of SyntheticMonitoringInstallation
type SyntheticMonitoringInstallationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SyntheticMonitoringInstallationParameters `json:"forProvider"`
}

// SyntheticMonitoringInstallationStatus defines the observed state of SyntheticMonitoringInstallation.
type SyntheticMonitoringInstallationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SyntheticMonitoringInstallationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SyntheticMonitoringInstallation is the Schema for the SyntheticMonitoringInstallations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafanajet}
type SyntheticMonitoringInstallation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SyntheticMonitoringInstallationSpec   `json:"spec"`
	Status            SyntheticMonitoringInstallationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SyntheticMonitoringInstallationList contains a list of SyntheticMonitoringInstallations
type SyntheticMonitoringInstallationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SyntheticMonitoringInstallation `json:"items"`
}

// Repository type metadata.
var (
	SyntheticMonitoringInstallation_Kind             = "SyntheticMonitoringInstallation"
	SyntheticMonitoringInstallation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SyntheticMonitoringInstallation_Kind}.String()
	SyntheticMonitoringInstallation_KindAPIVersion   = SyntheticMonitoringInstallation_Kind + "." + CRDGroupVersion.String()
	SyntheticMonitoringInstallation_GroupVersionKind = CRDGroupVersion.WithKind(SyntheticMonitoringInstallation_Kind)
)

func init() {
	SchemeBuilder.Register(&SyntheticMonitoringInstallation{}, &SyntheticMonitoringInstallationList{})
}
