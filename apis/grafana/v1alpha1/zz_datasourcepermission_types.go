/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DataSourcePermissionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DataSourcePermissionParameters struct {

	// ID of the datasource to apply permissions to.
	// +kubebuilder:validation:Required
	DatasourceID *float64 `json:"datasourceId" tf:"datasource_id,omitempty"`

	// The permission items to add/update. Items that are omitted from the list will be removed.
	// +kubebuilder:validation:Required
	Permissions []DataSourcePermissionPermissionsParameters `json:"permissions" tf:"permissions,omitempty"`
}

type DataSourcePermissionPermissionsObservation struct {
}

type DataSourcePermissionPermissionsParameters struct {

	// Permission to associate with item. Must be `Query`.
	// +kubebuilder:validation:Required
	Permission *string `json:"permission" tf:"permission,omitempty"`

	// ID of the team to manage permissions for. Defaults to `0`.
	// +kubebuilder:validation:Optional
	TeamID *float64 `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// ID of the user to manage permissions for. Defaults to `0`.
	// +kubebuilder:validation:Optional
	UserID *float64 `json:"userId,omitempty" tf:"user_id,omitempty"`
}

// DataSourcePermissionSpec defines the desired state of DataSourcePermission
type DataSourcePermissionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DataSourcePermissionParameters `json:"forProvider"`
}

// DataSourcePermissionStatus defines the observed state of DataSourcePermission.
type DataSourcePermissionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DataSourcePermissionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataSourcePermission is the Schema for the DataSourcePermissions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafanajet}
type DataSourcePermission struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataSourcePermissionSpec   `json:"spec"`
	Status            DataSourcePermissionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataSourcePermissionList contains a list of DataSourcePermissions
type DataSourcePermissionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataSourcePermission `json:"items"`
}

// Repository type metadata.
var (
	DataSourcePermission_Kind             = "DataSourcePermission"
	DataSourcePermission_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DataSourcePermission_Kind}.String()
	DataSourcePermission_KindAPIVersion   = DataSourcePermission_Kind + "." + CRDGroupVersion.String()
	DataSourcePermission_GroupVersionKind = CRDGroupVersion.WithKind(DataSourcePermission_Kind)
)

func init() {
	SchemeBuilder.Register(&DataSourcePermission{}, &DataSourcePermissionList{})
}
