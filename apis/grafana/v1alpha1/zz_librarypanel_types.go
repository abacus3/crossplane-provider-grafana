/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LibraryPanelObservation struct {
	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	DashboardIds []*float64 `json:"dashboardIds,omitempty" tf:"dashboard_ids,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	FolderName *string `json:"folderName,omitempty" tf:"folder_name,omitempty"`

	FolderUID *string `json:"folderUid,omitempty" tf:"folder_uid,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	OrgID *float64 `json:"orgId,omitempty" tf:"org_id,omitempty"`

	PanelID *float64 `json:"panelId,omitempty" tf:"panel_id,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	Updated *string `json:"updated,omitempty" tf:"updated,omitempty"`

	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type LibraryPanelParameters struct {

	// ID of the folder where the library panel is stored.
	// +kubebuilder:validation:Optional
	FolderID *float64 `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// The JSON model for the library panel.
	// +kubebuilder:validation:Required
	ModelJSON *string `json:"modelJson" tf:"model_json,omitempty"`

	// Name of the library panel.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The unique identifier (UID) of a library panel uniquely identifies library panels between multiple Grafana installs. Itâ€™s automatically generated unless you specify it during library panel creation.The UID provides consistent URLs for accessing library panels and when syncing library panels between multiple Grafana installs.
	// +kubebuilder:validation:Optional
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

// LibraryPanelSpec defines the desired state of LibraryPanel
type LibraryPanelSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LibraryPanelParameters `json:"forProvider"`
}

// LibraryPanelStatus defines the observed state of LibraryPanel.
type LibraryPanelStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LibraryPanelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LibraryPanel is the Schema for the LibraryPanels API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafanajet}
type LibraryPanel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LibraryPanelSpec   `json:"spec"`
	Status            LibraryPanelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LibraryPanelList contains a list of LibraryPanels
type LibraryPanelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LibraryPanel `json:"items"`
}

// Repository type metadata.
var (
	LibraryPanel_Kind             = "LibraryPanel"
	LibraryPanel_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LibraryPanel_Kind}.String()
	LibraryPanel_KindAPIVersion   = LibraryPanel_Kind + "." + CRDGroupVersion.String()
	LibraryPanel_GroupVersionKind = CRDGroupVersion.WithKind(LibraryPanel_Kind)
)

func init() {
	SchemeBuilder.Register(&LibraryPanel{}, &LibraryPanelList{})
}
