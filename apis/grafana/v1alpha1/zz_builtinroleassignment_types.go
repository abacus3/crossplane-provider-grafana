/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BuiltinRoleAssignmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type BuiltinRoleAssignmentParameters struct {

	// Organization roles (`Viewer`, `Editor`, `Admin`) or `Grafana Admin` to assign the roles to.
	// +kubebuilder:validation:Required
	BuiltinRole *string `json:"builtinRole" tf:"builtin_role,omitempty"`

	// Fixed or custom roles which provide granular access for specific resources within Grafana.
	// +kubebuilder:validation:Required
	Roles []RolesParameters `json:"roles" tf:"roles,omitempty"`
}

type RolesObservation struct {
}

type RolesParameters struct {

	// States whether the assignment is available across all organizations or not. Defaults to `false`.
	// +kubebuilder:validation:Optional
	Global *bool `json:"global,omitempty" tf:"global,omitempty"`

	// Unique identifier of the role to assign to `builtin_role`.
	// +kubebuilder:validation:Required
	UID *string `json:"uid" tf:"uid,omitempty"`
}

// BuiltinRoleAssignmentSpec defines the desired state of BuiltinRoleAssignment
type BuiltinRoleAssignmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BuiltinRoleAssignmentParameters `json:"forProvider"`
}

// BuiltinRoleAssignmentStatus defines the observed state of BuiltinRoleAssignment.
type BuiltinRoleAssignmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BuiltinRoleAssignmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BuiltinRoleAssignment is the Schema for the BuiltinRoleAssignments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,grafanajet}
type BuiltinRoleAssignment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BuiltinRoleAssignmentSpec   `json:"spec"`
	Status            BuiltinRoleAssignmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BuiltinRoleAssignmentList contains a list of BuiltinRoleAssignments
type BuiltinRoleAssignmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BuiltinRoleAssignment `json:"items"`
}

// Repository type metadata.
var (
	BuiltinRoleAssignment_Kind             = "BuiltinRoleAssignment"
	BuiltinRoleAssignment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BuiltinRoleAssignment_Kind}.String()
	BuiltinRoleAssignment_KindAPIVersion   = BuiltinRoleAssignment_Kind + "." + CRDGroupVersion.String()
	BuiltinRoleAssignment_GroupVersionKind = CRDGroupVersion.WithKind(BuiltinRoleAssignment_Kind)
)

func init() {
	SchemeBuilder.Register(&BuiltinRoleAssignment{}, &BuiltinRoleAssignmentList{})
}
